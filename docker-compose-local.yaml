version: "3.0"
services:
    postgres:
        container_name: telenote_postgres
        image: postgres:16
        restart: always
        env_file:
            - deploy.env
        ports:
            - "5432:5432"
        networks:
            - custom
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
                ]
            interval: 10s
            timeout: 3s
            retries: 3

    pgadmin:
        container_name: telenote_pgadmin4
        image: dpage/pgadmin4
        restart: always
        ports:
            - "5050:80"
        depends_on:
            - postgres
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: root
        networks:
            - custom
        volumes:
            - pgadmin-data:/var/lib/pgadmin

    alembic_migrations:
        container_name: telenote_alembic_migrations
        image: telenote_alembic_migrations # Specify the name of the Docker image to be built
        command: bash ./run_migartions.sh
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - deploy.env
        # environment:
        #     ALEMBIC_DATABASE_URL: "postgresql://postgres:postgres@postgres_db/postgres"
        #     POSTGRESQL_URL: "postgresql+asyncpg://postgres:postgres@postgres_db:5432/postgres"
        #     # SENTRY_URL: "https://2d340f23a0454ea0a23a0d2d6fbe2e1f@o4504938483875840.ingest.sentry.io/4504939751538688"
        #     APP_PORT: "8001"
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - "8001:8001"
        networks:
            - custom

networks:
    custom:
        driver: bridge

volumes:
    pgadmin-data:
